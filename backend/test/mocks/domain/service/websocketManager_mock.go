// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nakamura/program/webRTC-practice2/backend/internal/domain/service/websocketManager.go
//
// Generated by this command:
//
//	mockgen -source=/home/nakamura/program/webRTC-practice2/backend/internal/domain/service/websocketManager.go -destination=test/mocks/domain/service/websocketManager_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	entity "example.com/infrahandson/internal/domain/entity"
	service "example.com/infrahandson/internal/domain/service"
	gomock "go.uber.org/mock/gomock"
)

// MockWebSocketConnection is a mock of WebSocketConnection interface.
type MockWebSocketConnection struct {
	ctrl     *gomock.Controller
	recorder *MockWebSocketConnectionMockRecorder
	isgomock struct{}
}

// MockWebSocketConnectionMockRecorder is the mock recorder for MockWebSocketConnection.
type MockWebSocketConnectionMockRecorder struct {
	mock *MockWebSocketConnection
}

// NewMockWebSocketConnection creates a new mock instance.
func NewMockWebSocketConnection(ctrl *gomock.Controller) *MockWebSocketConnection {
	mock := &MockWebSocketConnection{ctrl: ctrl}
	mock.recorder = &MockWebSocketConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebSocketConnection) EXPECT() *MockWebSocketConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWebSocketConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWebSocketConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWebSocketConnection)(nil).Close))
}

// ReadMessage mocks base method.
func (m *MockWebSocketConnection) ReadMessage() (*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage")
	ret0, _ := ret[0].(*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockWebSocketConnectionMockRecorder) ReadMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockWebSocketConnection)(nil).ReadMessage))
}

// WriteMessage mocks base method.
func (m *MockWebSocketConnection) WriteMessage(arg0 *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockWebSocketConnectionMockRecorder) WriteMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockWebSocketConnection)(nil).WriteMessage), arg0)
}

// MockWebsocketManager is a mock of WebsocketManager interface.
type MockWebsocketManager struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketManagerMockRecorder
	isgomock struct{}
}

// MockWebsocketManagerMockRecorder is the mock recorder for MockWebsocketManager.
type MockWebsocketManagerMockRecorder struct {
	mock *MockWebsocketManager
}

// NewMockWebsocketManager creates a new mock instance.
func NewMockWebsocketManager(ctrl *gomock.Controller) *MockWebsocketManager {
	mock := &MockWebsocketManager{ctrl: ctrl}
	mock.recorder = &MockWebsocketManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketManager) EXPECT() *MockWebsocketManagerMockRecorder {
	return m.recorder
}

// BroadcastToRoom mocks base method.
func (m *MockWebsocketManager) BroadcastToRoom(ctx context.Context, roomID entity.RoomID, msg *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastToRoom", ctx, roomID, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastToRoom indicates an expected call of BroadcastToRoom.
func (mr *MockWebsocketManagerMockRecorder) BroadcastToRoom(ctx, roomID, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastToRoom", reflect.TypeOf((*MockWebsocketManager)(nil).BroadcastToRoom), ctx, roomID, msg)
}

// GetConnectionByUserID mocks base method.
func (m *MockWebsocketManager) GetConnectionByUserID(ctx context.Context, userID entity.UserID) (service.WebSocketConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionByUserID", ctx, userID)
	ret0, _ := ret[0].(service.WebSocketConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionByUserID indicates an expected call of GetConnectionByUserID.
func (mr *MockWebsocketManagerMockRecorder) GetConnectionByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionByUserID", reflect.TypeOf((*MockWebsocketManager)(nil).GetConnectionByUserID), ctx, userID)
}

// GetConnectionsByRoomID mocks base method.
func (m *MockWebsocketManager) GetConnectionsByRoomID(ctx context.Context, roomID entity.RoomID) ([]service.UserConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionsByRoomID", ctx, roomID)
	ret0, _ := ret[0].([]service.UserConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionsByRoomID indicates an expected call of GetConnectionsByRoomID.
func (mr *MockWebsocketManagerMockRecorder) GetConnectionsByRoomID(ctx, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionsByRoomID", reflect.TypeOf((*MockWebsocketManager)(nil).GetConnectionsByRoomID), ctx, roomID)
}

// Register mocks base method.
func (m *MockWebsocketManager) Register(ctx context.Context, conn service.WebSocketConnection, userID entity.UserID, roomID entity.RoomID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, conn, userID, roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockWebsocketManagerMockRecorder) Register(ctx, conn, userID, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockWebsocketManager)(nil).Register), ctx, conn, userID, roomID)
}

// Unregister mocks base method.
func (m *MockWebsocketManager) Unregister(ctx context.Context, conn service.WebSocketConnection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unregister", ctx, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unregister indicates an expected call of Unregister.
func (mr *MockWebsocketManagerMockRecorder) Unregister(ctx, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockWebsocketManager)(nil).Unregister), ctx, conn)
}
