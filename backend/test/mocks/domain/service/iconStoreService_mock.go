// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nakamura/program/Maximum/infra/Maximum-Infra-hands-on/backend/internal/domain/service/iconStoreService.go
//
// Generated by this command:
//
//	mockgen -source=/home/nakamura/program/Maximum/infra/Maximum-Infra-hands-on/backend/internal/domain/service/iconStoreService.go -destination=test/mocks/domain/service/iconStoreService_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	entity "example.com/infrahandson/internal/domain/entity"
	service "example.com/infrahandson/internal/domain/service"
	gomock "go.uber.org/mock/gomock"
)

// MockIconStoreService is a mock of IconStoreService interface.
type MockIconStoreService struct {
	ctrl     *gomock.Controller
	recorder *MockIconStoreServiceMockRecorder
	isgomock struct{}
}

// MockIconStoreServiceMockRecorder is the mock recorder for MockIconStoreService.
type MockIconStoreServiceMockRecorder struct {
	mock *MockIconStoreService
}

// NewMockIconStoreService creates a new mock instance.
func NewMockIconStoreService(ctrl *gomock.Controller) *MockIconStoreService {
	mock := &MockIconStoreService{ctrl: ctrl}
	mock.recorder = &MockIconStoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIconStoreService) EXPECT() *MockIconStoreServiceMockRecorder {
	return m.recorder
}

// GetIconPath mocks base method.
func (m *MockIconStoreService) GetIconPath(ctx context.Context, userID entity.UserID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIconPath", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIconPath indicates an expected call of GetIconPath.
func (mr *MockIconStoreServiceMockRecorder) GetIconPath(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIconPath", reflect.TypeOf((*MockIconStoreService)(nil).GetIconPath), ctx, userID)
}

// SaveIcon mocks base method.
func (m *MockIconStoreService) SaveIcon(ctx context.Context, iconData *service.IconData, userID entity.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveIcon", ctx, iconData, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveIcon indicates an expected call of SaveIcon.
func (mr *MockIconStoreServiceMockRecorder) SaveIcon(ctx, iconData, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIcon", reflect.TypeOf((*MockIconStoreService)(nil).SaveIcon), ctx, iconData, userID)
}
