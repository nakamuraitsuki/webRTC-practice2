// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nakamura/program/Maximum/infra/Maximum-Infra-hands-on/backend/internal/usecase/websocketcase/interface.go
//
// Generated by this command:
//
//	mockgen -source=/home/nakamura/program/Maximum/infra/Maximum-Infra-hands-on/backend/internal/usecase/websocketcase/interface.go -destination=test/mocks/usecase/websocketcase/interface_mock.go
//

// Package mock_websocketcase is a generated GoMock package.
package mock_websocketcase

import (
	context "context"
	reflect "reflect"

	websocketcase "example.com/infrahandson/internal/usecase/websocketcase"
	gomock "go.uber.org/mock/gomock"
)

// MockWebsocketUseCaseInterface is a mock of WebsocketUseCaseInterface interface.
type MockWebsocketUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockWebsocketUseCaseInterfaceMockRecorder is the mock recorder for MockWebsocketUseCaseInterface.
type MockWebsocketUseCaseInterfaceMockRecorder struct {
	mock *MockWebsocketUseCaseInterface
}

// NewMockWebsocketUseCaseInterface creates a new mock instance.
func NewMockWebsocketUseCaseInterface(ctrl *gomock.Controller) *MockWebsocketUseCaseInterface {
	mock := &MockWebsocketUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockWebsocketUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketUseCaseInterface) EXPECT() *MockWebsocketUseCaseInterfaceMockRecorder {
	return m.recorder
}

// ConnectUserToRoom mocks base method.
func (m *MockWebsocketUseCaseInterface) ConnectUserToRoom(ctx context.Context, req websocketcase.ConnectUserToRoomRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectUserToRoom", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectUserToRoom indicates an expected call of ConnectUserToRoom.
func (mr *MockWebsocketUseCaseInterfaceMockRecorder) ConnectUserToRoom(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectUserToRoom", reflect.TypeOf((*MockWebsocketUseCaseInterface)(nil).ConnectUserToRoom), ctx, req)
}

// DisconnectUser mocks base method.
func (m *MockWebsocketUseCaseInterface) DisconnectUser(ctx context.Context, req websocketcase.DisconnectUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectUser", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisconnectUser indicates an expected call of DisconnectUser.
func (mr *MockWebsocketUseCaseInterfaceMockRecorder) DisconnectUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectUser", reflect.TypeOf((*MockWebsocketUseCaseInterface)(nil).DisconnectUser), ctx, req)
}

// SendMessage mocks base method.
func (m *MockWebsocketUseCaseInterface) SendMessage(ctx context.Context, req websocketcase.SendMessageRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockWebsocketUseCaseInterfaceMockRecorder) SendMessage(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockWebsocketUseCaseInterface)(nil).SendMessage), ctx, req)
}
