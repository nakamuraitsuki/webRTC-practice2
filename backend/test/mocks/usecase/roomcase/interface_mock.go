// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nakamura/program/Maximum/infra/Maximum-Infra-hands-on/backend/internal/usecase/roomcase/interface.go
//
// Generated by this command:
//
//	mockgen -source=/home/nakamura/program/Maximum/infra/Maximum-Infra-hands-on/backend/internal/usecase/roomcase/interface.go -destination=test/mocks/usecase/roomcase/interface_mock.go
//

// Package mock_roomcase is a generated GoMock package.
package mock_roomcase

import (
	context "context"
	reflect "reflect"

	entity "example.com/infrahandson/internal/domain/entity"
	roomcase "example.com/infrahandson/internal/usecase/roomcase"
	gomock "go.uber.org/mock/gomock"
)

// MockRoomUseCaseInterface is a mock of RoomUseCaseInterface interface.
type MockRoomUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRoomUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockRoomUseCaseInterfaceMockRecorder is the mock recorder for MockRoomUseCaseInterface.
type MockRoomUseCaseInterfaceMockRecorder struct {
	mock *MockRoomUseCaseInterface
}

// NewMockRoomUseCaseInterface creates a new mock instance.
func NewMockRoomUseCaseInterface(ctrl *gomock.Controller) *MockRoomUseCaseInterface {
	mock := &MockRoomUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockRoomUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomUseCaseInterface) EXPECT() *MockRoomUseCaseInterfaceMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockRoomUseCaseInterface) CreateRoom(ctx context.Context, req roomcase.CreateRoomRequest) (roomcase.CreateRoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, req)
	ret0, _ := ret[0].(roomcase.CreateRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockRoomUseCaseInterfaceMockRecorder) CreateRoom(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockRoomUseCaseInterface)(nil).CreateRoom), ctx, req)
}

// DeleteRoom mocks base method.
func (m *MockRoomUseCaseInterface) DeleteRoom(ctx context.Context, req roomcase.DeleteRoomRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockRoomUseCaseInterfaceMockRecorder) DeleteRoom(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockRoomUseCaseInterface)(nil).DeleteRoom), ctx, req)
}

// GetAllRooms mocks base method.
func (m *MockRoomUseCaseInterface) GetAllRooms(ctx context.Context) ([]*entity.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRooms", ctx)
	ret0, _ := ret[0].([]*entity.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRooms indicates an expected call of GetAllRooms.
func (mr *MockRoomUseCaseInterfaceMockRecorder) GetAllRooms(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRooms", reflect.TypeOf((*MockRoomUseCaseInterface)(nil).GetAllRooms), ctx)
}

// GetRoomByID mocks base method.
func (m *MockRoomUseCaseInterface) GetRoomByID(ctx context.Context, params roomcase.GetRoomByIDRequest) (roomcase.GetRoomByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByID", ctx, params)
	ret0, _ := ret[0].(roomcase.GetRoomByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByID indicates an expected call of GetRoomByID.
func (mr *MockRoomUseCaseInterfaceMockRecorder) GetRoomByID(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByID", reflect.TypeOf((*MockRoomUseCaseInterface)(nil).GetRoomByID), ctx, params)
}

// GetUsersInRoom mocks base method.
func (m *MockRoomUseCaseInterface) GetUsersInRoom(ctx context.Context, req roomcase.GetUsersInRoomRequest) (roomcase.GetUsersInRoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInRoom", ctx, req)
	ret0, _ := ret[0].(roomcase.GetUsersInRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersInRoom indicates an expected call of GetUsersInRoom.
func (mr *MockRoomUseCaseInterfaceMockRecorder) GetUsersInRoom(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInRoom", reflect.TypeOf((*MockRoomUseCaseInterface)(nil).GetUsersInRoom), ctx, req)
}

// JoinRoom mocks base method.
func (m *MockRoomUseCaseInterface) JoinRoom(ctx context.Context, req roomcase.JoinRoomRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinRoom", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinRoom indicates an expected call of JoinRoom.
func (mr *MockRoomUseCaseInterfaceMockRecorder) JoinRoom(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinRoom", reflect.TypeOf((*MockRoomUseCaseInterface)(nil).JoinRoom), ctx, req)
}

// LeaveRoom mocks base method.
func (m *MockRoomUseCaseInterface) LeaveRoom(ctx context.Context, req roomcase.LeaveRoomRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveRoom", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveRoom indicates an expected call of LeaveRoom.
func (mr *MockRoomUseCaseInterfaceMockRecorder) LeaveRoom(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveRoom", reflect.TypeOf((*MockRoomUseCaseInterface)(nil).LeaveRoom), ctx, req)
}
